{"version":3,"sources":["serviceWorker.ts","components/Reddit.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","getPosts","subreddit","a","axios","get","data","children","map","o","RedditContainer","useState","search","setSearch","value","onChange","e","target","console","log","Reddit","subredit","debouncedSearchQuery","delay","React","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","useQuery","status","isFetching","post","title","id","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","staleTime","App","QueryClientProvider","client","initialIsOpen","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0TAaoBA,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2D,mICKAC,EAAQ,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACMC,IAAMC,IAAN,mCAAsCH,EAAtC,UADN,uBACRI,EADQ,EACRA,KADQ,kBAERA,EAAKA,KAAKC,SAASC,KAAI,SAACC,GAAD,OAAYA,EAAEH,SAF7B,2CAAH,sDAyBDI,EAAsB,WAAO,IAAD,EACXC,mBAAS,WADE,mBAChCC,EADgC,KACxBC,EADwB,KASvC,OACE,0CAEG,IACD,uBAAOC,MAAOF,EAAQG,SAVL,SAACC,GAA2B,IACxCF,EAASE,EAAEC,OAAXH,MACPI,QAAQC,IAAIL,GACZD,EAAUC,MAQR,cAAC,EAAD,CAAQZ,UAAWU,QAKZQ,EAA0B,SAAC,GAAiB,IAvCvCC,EAuCuBnB,EAAe,EAAfA,UACjCoB,EAtCY,SAACR,GAAwC,IAAzBS,EAAwB,uDAAR,IAAQ,EACdC,IAAMb,SAASG,GADD,mBACnDW,EADmD,KACnCC,EADmC,KAe1D,OAZAF,IAAMG,WAAU,WACd,IAAMC,EAAeC,YAAW,WAC9BX,QAAQC,IAAI,oBAAqBL,GACjCY,EAAkBZ,KACjBS,GAGH,OAAO,WACLO,aAAaF,MAEd,CAACd,EAAOS,IAEJE,EAuBsBM,CAAY7B,EAAW,KADE,GAvCtCmB,EAyC4BC,EAzCPU,YAAS,CAAC,QAASX,IAAW,kBAAMpB,EAASoB,OAyC3EY,EAF+C,EAE/CA,OAAQ3B,EAFuC,EAEvCA,KAAM4B,EAFiC,EAEjCA,WAErB,OACE,gCACE,0CAAWhC,KACX,4BAAI+B,IACJ,4BAAIC,EAAa,gDAA2B,OAC3C5B,GACC,6BACGA,EAAKE,KAAI,SAAC2B,GAAD,OACR,6BAAmBA,EAAKC,OAAfD,EAAKE,aC3EpBC,EAAc,IAAIC,IAAY,CAClCC,eAAgB,CACdC,QAAS,CACPC,sBAAsB,EACtBC,UAAW,QAiBJC,EAAU,kBACrB,eAACC,EAAA,EAAD,CAAqBC,OAAQR,EAA7B,UACE,cAAC,EAAD,IACA,cAAC,qBAAD,CAAoBS,eAAe,QCvBvCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SHsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.b03d8f6a.chunk.js","sourcesContent":["/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {\n  BaseSyntheticEvent, FC, useState,\n} from 'react';\nimport './Tweet.css';\nimport './Avatar.css';\nimport './Message.css';\nimport './Author.css';\nimport './Time.css';\nimport './Buttons.css';\n\nimport axios from 'axios';\nimport {useQuery} from 'react-query';\n\nexport interface RedditProps {\n  subreddit: string;\n}\n\nexport interface PostModel {\n  id: string;\n  selftext: string;\n  subreddit: string;\n  title: string;\n}\n\nconst getPosts = async (subreddit: string) => {\n  const {data} = await axios.get(`https://www.reddit.com/r/${subreddit}.json`);\n  return data.data.children.map((o: any) => o.data);\n};\n\nconst usePosts = (subredit: string) => useQuery(['posts', subredit], () => getPosts(subredit));\n\nconst useDebounce = (value: string, delay: number = 500) => {\n  const [debouncedValue, setDebouncedValue] = React.useState(value);\n\n  React.useEffect(() => {\n    const handler: any = setTimeout(() => {\n      console.log('setDebouncedValue', value);\n      setDebouncedValue(value);\n    }, delay);\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\nexport const RedditContainer: FC = () => {\n  const [search, setSearch] = useState('reactjs');\n\n  const handleChange = (e: BaseSyntheticEvent) => {\n    const {value} = e.target;\n    console.log(value);\n    setSearch(value);\n  };\n\n  return (\n    <div>\n      Search:\n      {' '}\n      <input value={search} onChange={handleChange}/>\n      <Reddit subreddit={search}/>\n    </div>\n  );\n};\n\nexport const Reddit: FC<RedditProps> = ({subreddit}) => {\n  const debouncedSearchQuery = useDebounce(subreddit, 600);\n  const {status, data, isFetching} = usePosts(debouncedSearchQuery);\n\n  return (\n    <div>\n      <h1>{`/r/${subreddit}`}</h1>\n      <p>{status}</p>\n      <p>{isFetching ? <div>Refreshing...</div> : null}</p>\n      {data && (\n        <ul>\n          {data.map((post: PostModel) => (\n            <li key={post.id}>{post.title}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n","import React, {FC} from 'react';\nimport {QueryClient, QueryClientProvider} from 'react-query';\nimport {ReactQueryDevtools} from 'react-query/devtools';\nimport {RedditContainer} from './components/Reddit';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false,\n      staleTime: 5000,\n    }\n  }\n});\n\n// const testTweet: TweetModel = {\n//   message: 'Something about cats.',\n//   gravatar: 'xyz',\n//   author: {\n//     handle: 'catperson',\n//     name: 'IAMA Cat Person',\n//   },\n//   likes: 2,\n//   retweets: 0,\n//   timestamp: new Date('2016-07-30 21:24:37'),\n// };\n\nexport const App: FC = () => (\n  <QueryClientProvider client={queryClient}>\n    <RedditContainer/>\n    <ReactQueryDevtools initialIsOpen={false}/>\n  </QueryClientProvider>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}